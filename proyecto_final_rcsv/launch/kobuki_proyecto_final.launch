<!-- Launches Kobuki Gazebo simulation in the world for this assigment -->
<launch>

    <!-- start Gazebo with taller empty world -->
    <!-- Define world -->
    <arg name="proyecto_final_world" default="$(find gazebo_ros)/launch/empty_world.launch"/>
    
    <arg name="trayec" default="1"/>
    <param name="trayec_py" value="$(arg trayec)"/>

    <param name="esfera_description" command="$(find xacro)/xacro --inorder '$(find proyecto_final_rcsv)/urdf/esfera.xacro'" />
		<arg name="xsphe" default="2.0"/>
		<arg name="ysphe" default="0.0"/>
		<arg name="zsphe" default="0.5"/>

    <group if="$(eval arg('trayec') == 1)">
        <!-- Robot initial pose -->
        <arg name="x" default="0.0"/>
        <arg name="y" default="0.0"/>
        <arg name="z" default="0.01"/>
        <arg name="roll" default="0.0"/>
        <arg name="pitch" default="0.0"/>
        <arg name="yaw" default="$(eval 0.0 * 3.141592 / 180.0)"/>

        <arg name="robot_name" value="kobuki"/>

        <param 
            name="robot_description" 
            command="$(find xacro)/xacro '$(find proyecto_final_rcsv)/urdf/kobuki_standalone.urdf.xacro'"/>

        <node pkg="gazebo_ros" type="spawn_model" name="spawn_$(arg robot_name)"
            args="-x $(arg x) -y $(arg y) -z $(arg z)
                -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)
                -urdf -param robot_description 
                -model $(arg robot_name)"
                respawn="false">
        </node>    
    </group>

    <group if="$(eval arg('trayec') == 2)">
        <!-- Robot initial pose -->
        <arg name="x" default="1.0"/>
        <arg name="y" default="1.0"/>
        <arg name="z" default="0.01"/>
        <arg name="roll" default="0.0"/>
        <arg name="pitch" default="0.0"/>
        <arg name="yaw" default="$(eval -90.0 * 3.141592 / 180.0)"/>

        <arg name="robot_name" value="kobuki"/>

        <param 
            name="robot_description" 
            command="$(find xacro)/xacro '$(find proyecto_final_rcsv)/urdf/kobuki_standalone.urdf.xacro'"/>

        <node pkg="gazebo_ros" type="spawn_model" name="spawn_$(arg robot_name)"
            args="-x $(arg x) -y $(arg y) -z $(arg z)
                -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)
                -urdf -param robot_description 
                -model $(arg robot_name)"
                respawn="false">
        </node>    
    </group>

    <group if="$(eval arg('trayec') == 3)">
        <!-- Robot initial pose -->
        <arg name="x" default="-1.0"/>
        <arg name="y" default="-3.5"/>
        <arg name="z" default="0.01"/>
        <arg name="roll" default="0.0"/>
        <arg name="pitch" default="0.0"/>
        <arg name="yaw" default="$(eval -90 * 3.141592 / 180.0)"/>

        <arg name="robot_name" value="kobuki"/>

        <param 
            name="robot_description" 
            command="$(find xacro)/xacro '$(find proyecto_final_rcsv)/urdf/kobuki_standalone.urdf.xacro'"/>

        <node pkg="gazebo_ros" type="spawn_model" name="spawn_$(arg robot_name)"
            args="-x $(arg x) -y $(arg y) -z $(arg z)
                -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)
                -urdf -param robot_description 
                -model $(arg robot_name)"
                respawn="false">
        </node>    
    </group>





    <!-- Launch Gazebo-->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(arg proyecto_final_world)"/> 
        <arg name="use_sim_time" value="true"/>
        <arg name="debug" value="false"/>
        <arg name="paused" value="false"/>
    </include>  
      <!-- Spawn Robot-->


    <node name="esfera_spawn" 
			  pkg="gazebo_ros" 
			  type="spawn_model" 
			  output="screen"
		       args="-urdf -param esfera_description 
			  -model esfera -x $(arg xsphe) -y $(arg ysphe) -z $(arg zsphe)"/> 
    

    <!-- State Publisher
    <node 
        pkg="robot_state_publisher" 
        type="robot_state_publisher" 
        name="robot_state_publisher" 
        output="screen"
    />
     -->

    <!-- Broadcaster 
    <node 
        pkg="proyecto_final_rcsv" 
        type="trayectory_publisher.py" 
        name="trayectory_publisher" 
        output="screen" />

     -->
        

</launch>